###############################################################################
#
# IAR C/C++ Compiler V2.20.1.176 for STM8                 16/Nov/2017  19:34:00
# Copyright 2010-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  D:\秦东\test1\wifi-uart - 10-20\main.c
#    Command line =  
#        "D:\秦东\test1\wifi-uart - 10-20\main.c" -e -Ol --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_cross_call --debug
#        --code_model small --data_model large -o "D:\秦东\test1\wifi-uart -
#        10-20\Debug\Obj" --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.3\stm8\LIB\dlstm8sln.h" -lcN
#        "D:\秦东\test1\wifi-uart - 10-20\Debug\List" -I
#        "D:\秦东\test1\wifi-uart - 10-20\Gizwits\" -I "D:\秦东\test1\wifi-uart
#        - 10-20\Utils\" --vregs 16
#    List file    =  D:\秦东\test1\wifi-uart - 10-20\Debug\List\main.lst
#    Object file  =  D:\秦东\test1\wifi-uart - 10-20\Debug\Obj\main.o
#
###############################################################################

D:\秦东\test1\wifi-uart - 10-20\main.c
      1          
      2          
      3          /*    添加包含芯片的头文件    */
      4          #include<iostm8s103f3.h>
      5          
      6          #include "gizwits_product.h"
      7          
      8          #include "common.h"
      9          
     10          
     11          /** Current datapoint */
     12          dataPoint_t currentDataPoint;
     13          
     14          /*******************************************************************************
     15          **函数名称：void Timer4Init()
     16          **功能描述：定时器4参数初始化
     17          
     18          *******************************************************************************/
     19          void Timer4Init()
     20          {
     21           
     22            TIM4_IER_bit.UIE = 0;           //先禁止定时器4更新中断
     23            TIM4_EGR_bit.UG = 0;            //
     24            TIM4_PSCR_bit.PSC = 7;          //定时器4时钟 = 16MHz / 16 = 1000kHZ 
     25                                                                     
     26            TIM4_ARR = 125;                 //设定1定时器产生1毫秒重装载时的计数值，255是最大值
     27            TIM4_CNTR = 0x00;               //设定计数器的初值
     28             
     29           
     30            TIM4_SR_bit.UIF = 0;            //清除更新中断标志
     31            TIM4_SR_bit.TIF = 0;            //清除触发中断标志
     32            TIM4_CR1_bit.CEN = 1;           //使能定时器4
     33            TIM4_CR1_bit.ARPE = 1;          //使能预装载寄存器缓冲
     34            TIM4_IER_bit.UIE = 1;           //使能更新中断 
     35          
     36          }
     37          
     38          
     39          /*******************************************************************************/
     40          
     41          
     42          /*******************************************************************************
     43          **函数名称：void UART1_Init(unsigned int baudrate)
     44          **功能描述：初始化USART模块
     45          **入口参数：unsigned int baudrate  -> 设置串口波特率
     46          
     47          *******************************************************************************/
     48          void UART1_Init()
     49          {   
     50            unsigned int baud;              //
     51            
     52            baud = 16000000 / 115200;     //设定串口相应波特率与串口时钟的分频数，并设置波特率为115200 bps
     53            
     54            //先写BRR2 , 再写BRR1
     55            UART1_BRR2 = ((unsigned char)((baud & 0xf000) >> 8 )) | ((unsigned char)(baud & 0x000f));       //先写波特比率的高4位与低4位
     56            UART1_BRR1 =  ((unsigned char)((baud & 0x0ff0) >> 4));                                          //后写波特比率的中间8位
     57            
     58            UART1_CR1_bit.UART0 = 0;        //使能UART0 
     59            UART1_CR2_bit.RIEN = 1;         //使能中断接收
     60            UART1_CR2_bit.TEN = 1;          //使能发送
     61            UART1_CR2_bit.REN = 1;          //接收使能
     62          
     63          }
     64          
     65          
     66          /*******************************************************************************
     67          **函数名称：void Uart_SendData(unsigned char  data)
     68          **功能描述：向串口发送寄存器写入一个字节数据
     69          **入口参数：unsigned char  data
     70          
     71          *******************************************************************************/
     72          void Uart_SendData(unsigned char  data)
     73          {
     74            while(!(UART1_SR&0X80));        //判断发送数据寄存器是否为空
     75            UART1_DR = data;                //向发送寄存器写入数据  
     76          }
     77          
     78          
     79          
     80          /*******************************************************************************
     81          **函数名称：void ALL_LED_Init()    Name: void ALL_LED_Init()
     82          **功能描述：初始化LED灯的IO口设为输出
     83          **入口参数：无
     84          **输出：无
     85          *******************************************************************************/
     86          void ALL_LED_Init()
     87          {
     88            //LED1 Init
     89            PD_DDR_bit.DDR2 = 1;    //设置端口PD->2的输入输出方向寄存器为输出方向
     90            PD_CR1_bit.C12 = 1;     //设置PD2为推挽输出
     91            PD_CR2_bit.C22 = 1;     //设置PD2的输出最大速度为10MHZ
     92            
     93            //LED2 Init
     94            PC_DDR_bit.DDR7 = 1;    //设置端口PC->7的输入输出方向寄存器为输出方向
     95            PC_CR1_bit.C17 = 1;     //设置PC7为推挽输出
     96            PC_CR2_bit.C27 = 1;     //设置PC7的输出最大速度为10MHZ
     97            
     98            //LED3 Init
     99            PC_DDR_bit.DDR6 = 1;    //设置端口PC->6的输入输出方向寄存器为输出方向
    100            PC_CR1_bit.C16 = 1;     //设置PC6为推挽输出
    101            PC_CR2_bit.C26 = 1;     //设置PC6的输出最大速度为10MHZ
    102            
    103            //LED4 Init
    104            PC_DDR_bit.DDR3 = 1;    //设置端口PC->3的输入输出方向寄存器为输出方向
    105            PC_CR1_bit.C13 = 1;     //设置PC3为推挽输出
    106            PC_CR2_bit.C23 = 1;     //设置PC3的输出最大速度为10MHZ
    107          }
    108          
    109          
    110          /*******************************************************************************
    111          **函数名称：ALLKey_ExtInterrupt_Init()
    112          **功能描述：配置Key1 , Key2 , Key3外部中断输入按键
    113          **入口参数：无
    114          **输出：无
    115          *******************************************************************************/
    116          void ALLKey_ExtInterrupt_Init()
    117          {
    118            //KEY1外部中断_Init
    119            PA_DDR_bit.DDR3 = 0;      //GPA->PIN3 设置端口PA->3的输入输出方向寄存器为输入方向
    120            PA_CR1_bit.C13 = 1;       //GPA->PIN3 带上拉电阻输入
    121            PA_CR2_bit.C23 = 0;       //GPA->PIN3  使能外部中断
    122          
    123            
    124            //KEY2外部中断_Init
    125            PD_DDR_bit.DDR3 = 0;      //GPD->PIN3 设置端口PD->3的输入输出方向寄存器为输入方向
    126            PD_CR1_bit.C13 = 1;       //GPD->PIN3 带上拉电阻输入
    127            PD_CR2_bit.C23 = 0;       //GPD->PIN3  使能外部中断
    128          
    129            
    130            //KEY3外部中断_Init
    131            PC_DDR_bit.DDR5 = 0;      //GPC->PIN5 设置端口PC->5的输入输出方向寄存器为输入方向
    132            PC_CR1_bit.C15 = 1;       //GPC->PIN5 带上拉电阻输入
    133            PC_CR2_bit.C25 = 0;       //GPC->PIN5  使能外部中断
    134          
    135          }
    136          
    137          void BeepInit()
    138          {
    139             BEEP_CSR_bit.BEEPDIV = 0x05;         //8 * （5 + 2）= 56分频
    140             BEEP_CSR_bit.BEEPSEL = 0x00;         //蜂鸣器的输出频率 = Fls / ( 8 * (B EEPDIV + 2) )= 128K / (8 * 7) = 2285HZ
    141          
    142          }
    143          
    144          
    145          
    146          //按钮
    147          unsigned int beetime_count;
    148          unsigned char bottom[3];
    149          unsigned char push[3];
    150          void keyscan(void)
    151          {
    152            if(PA_IDR_bit.IDR3 == 0)//判断按钮1是否被按下 
    153               {
    154                 if(bottom[0] < 10 )
    155                   {
    156                    bottom[0]++;
    157                   }
    158           
    159                 if(bottom[0] >= 10 && push[0] == 0 )  
    160                   {
    161                    gizwitsSetMode(WIFI_RESET_MODE);
    162                    push[0] = 1;
    163                   }
    164                }
    165             
    166            else
    167               {
    168                if(bottom[0] > 0 )
    169                  {
    170                  bottom[0]--;
    171                  }
    172                  
    173               else  
    174                  {
    175                   push[0] = 0;
    176                  }
    177                }
    178          
    179            
    180            if(PD_IDR_bit.IDR3 == 0)//判断按钮2是否被按下 
    181               {
    182                 if(bottom[1] < 10 )
    183                   {
    184                    bottom[1]++;
    185                   }
    186           
    187                 if(bottom[1] >= 10 && push[1] == 0 )  
    188                   {
    189                    gizwitsSetMode(WIFI_SOFTAP_MODE);
    190                    push[1] = 1;
    191                   }
    192                }
    193             
    194            else 
    195               {
    196                if(bottom[1] > 0 )
    197                  {
    198                  bottom[1]--;
    199                  }
    200                  
    201                else  
    202                  {
    203                    push[1] = 0;
    204                   }
    205                }  
    206          
    207            if(PC_IDR_bit.IDR5 == 0&& push[2] == 0 )//判断按钮3是否被按下 
    208               {
    209                 if(bottom[2] < 10 )
    210                   {
    211                    bottom[2]++;
    212                   }
    213           
    214                 if(bottom[2] >= 10 )  
    215                   {
    216                    gizwitsSetMode(WIFI_AIRLINK_MODE);
    217             
    218                    push[2] = 1;
    219                   }
    220                }
    221             
    222            else 
    223               {
    224                if(bottom[2] > 0 )
    225                  {
    226                  bottom[2]--;
    227                  }
    228                  
    229                else  
    230                  {
    231                    push[2] = 0;
    232                   }
    233                }  
    234          
    235          }
    236          
    237          /**
    238          * @brief 串口写操作，发送数据报文(报文数据中遇 0xFF 需要用 0x55 转义)到 WiFi 模组
    239          *
    240          * @param buf : 数据地址
    241          * @param len : 数据长度
    242          *
    243          * @return : 正确返回有效数据长度;-1，错误返回
    244          */
    245          int32_t uartWrite(uint8_t *buf, uint32_t len)
    246          {
    247              uint32_t i = 0;
    248              if(NULL == buf)
    249              {
    250                  return -1;  
    251              }
    252              for(i=0; i<len; i++)
    253              {
    254                Uart_SendData(buf[i]);
    255                if(i >=2 && buf[i] == 0xFF)
    256                {
    257                  Uart_SendData(buf[i]);
    258                }
    259              }
    260              return len;
    261          }
    262          
    263            
    264          /*    串口接收数据中断服务函数    */
    265          #pragma vector = 0x14              //设置串口接收中断向量号 = 0X14 = 20
    266          __interrupt void UART1_RX_RXNE(void)
    267          {          
    268            unsigned char value ;
    269            UART1_SR_RXNE = 1;    //清除中断标志
    270            value = UART1_DR;      //读出串口接收到的数据
    271            gizPutData(&value, 1);
    272          
    273          }
    274          #pragma vector = 25     //设置定时器4重载的中断向量号 = 25
    275          __interrupt void TIM4_UPDATE_IRQHandler(void)
    276          {
    277            TIM4_SR_bit.UIF = 0;  //清除中断标志
    278            
    279           
    280          
    281            
    282             keyscan();        
    283          
    284          
    285              
    286                    
    287           //********************************   
    288                 //蜂鸣器开启
    289               if( beetime_count > 0 )
    290                 {
    291                   beetime_count--;
    292                   BEEP_CSR_bit.BEEPEN = 1; 
    293                 }
    294                else 
    295                 {
    296                  BEEP_CSR_bit.BEEPEN = 0; 
    297          
    298                 }
    299               
    300               
    301           //******************************        
    302          
    303            gizTimerMs();
    304                     
    305          
    306          }
    307          
    308          unsigned char ATsend[18]="AT+CIPSEND=0,2\r\n";
    309          
    310          /*    主函数    */
    311          int main(void)
    312          {
    313          
    314          
    315            asm("sim");                     //关闭系统总中断
    316            CLK_CKDIVR = 0x00;              //CPUDIV = 1 HSIDIV = 1  内部时钟 = 16Mhz
    317          
    318            Timer4Init();
    319            UART1_Init();               //调用串口初始化函数
    320            ALL_LED_Init();            //调用所有LED灯初始化函数  
    321            BeepInit();  
    322            asm("rim");                     //打开系统总中断
    323            
    324             userInit();
    325          
    326          
    327             gizwitsInit();
    328            
    329            //Setupwifi();
    330             
    331            
    332            while(1)                        //进入死循环，等待串口接收中断
    333            {
    334          
    335               userHandle(); 
    336               gizwitsHandle((dataPoint_t *)&currentDataPoint);
    337               
    338            }
    339          }
    340          
    341          
    342          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      37  ALLKey_ExtInterrupt_Init
      49  ALL_LED_Init
      18  ATsend
      19  BeepInit
       1  TIM4_ARR
       1  TIM4_CNTR
      52  TIM4_UPDATE_IRQHandler
      45  Timer4Init
       1  UART1_BRR1
       1  UART1_BRR2
       1  UART1_DR
      40  UART1_Init
      49  UART1_RX_RXNE
       9  Uart_SendData
       1  _A_BEEP_CSR
       1  _A_CLK_CKDIVR
       1  _A_PA_CR1
       1  _A_PA_CR2
       1  _A_PA_DDR
       1  _A_PA_IDR
       1  _A_PC_CR1
       1  _A_PC_CR2
       1  _A_PC_DDR
       1  _A_PC_IDR
       1  _A_PD_CR1
       1  _A_PD_CR2
       1  _A_PD_DDR
       1  _A_PD_IDR
       1  _A_TIM4_CR1
       1  _A_TIM4_EGR
       1  _A_TIM4_IER
       1  _A_TIM4_PSCR
       1  _A_TIM4_SR
       1  _A_UART1_CR1
       1  _A_UART1_CR2
       1  _A_UART1_SR
       2  beetime_count
       3  bottom
      19  currentDataPoint
     217  keyscan
      39  main
       3  push
     138  uartWrite

 
  27 bytes in section .near.bss
  18 bytes in section .near.data
  27 bytes in section .near.noinit    (abs)
 694 bytes in section .near_func.text
 
 694 bytes of CODE memory
  45 bytes of DATA memory (+ 27 bytes shared)

Errors: none
Warnings: 1
